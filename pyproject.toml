[tool.poetry]
name = "not-again-ai"
version = "0.2.0"
description = "Designed to once and for all collect all the little things that come up over and over again in AI projects and put them in one place."
authors = ["DaveCoDev <dave.co.dev@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/DaveCoDev/not-again-ai"
documentation = "https://github.com/DaveCoDev/not-again-ai"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
# Some packages, such as scipy, constrain their upper bound of Python versions they support.
# Without also constraining the upper bound here, Poetry will not select those versions and will
# result in an old version being resolved/locked.
python = "^3.10, <3.13"

# Optional dependencies are defined here, and groupings are defined below.
numpy = { version = "^1.26.0", optional = true }
pandas = { version = "^2.1.0", optional = true }
seaborn = { version = "^0.13.0", optional = true }
scipy = { version = "^1.11.2", optional = true }
scikit-learn = { version = "^1.3.0", optional = true }

[tool.poetry.extras]
statistics = ["numpy", "scikit-learn", "scipy"]
viz = ["numpy", "pandas", "seaborn"]

[tool.poetry.group.nox.dependencies]
nox-poetry = "*"

[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-randomly = "*"

[tool.poetry.group.type_check.dependencies]
mypy = "*"
# As of mypy 0.900, mypy no longer bundles the stubs for third-party libraries that reside
# in the typeshed project. Add these "types-" packages here if you depend on them in
# requirements.in (e.g. types-requests).
# See: http://mypy-lang.blogspot.com/2021/06/mypy-0900-released.html
#      https://github.com/python/typeshed/tree/main/stubs

[tool.poetry.group.lint.dependencies]
ruff = "*"

[tool.poetry.group.fmt.dependencies]
black = "*"

[tool.poetry.group.docs.dependencies]
mkdocs-material = "*"
mkdocs-htmlproofer-plugin = "*"
mkdocstrings = { version = "*", extras = ["python"] }
# Autodoc.
mkdocs-gen-files = "*"
mkdocs-literate-nav = "*"

[tool.poetry.scripts]
not-again-ai = "not_again_ai.cli:entry_point"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
ignore_missing_imports = true
strict = true
# If certain strict config options are too pedantic for a project,
# disable them selectively here by setting to false.
disallow_untyped_calls = false

[tool.ruff]
line-length = 120
target-version = "py311"
extend-select = [
    "I", # isort
    "N", # pep8-naming
    "UP", # pyupgrade
    "RUF", # ruff
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
]
extend-ignore = ["RUF005", "E501"]
src = ["src"]

[tool.ruff.isort]
force-sort-within-sections = true
split-on-trailing-comma = false
# For non-src directory projects, explicitly set top level package names:
# known-first-party = ["my-app"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["typer.Argument"]

[tool.black]
line-length = 120
target-version = ["py39", "py310", "py311", "py312"]
# black will automatically exclude all files listed in .gitignore
# If you need to exclude additional folders, consider using extend-exclude to avoid disabling the
# default .gitignore behaviour.

[tool.pytest.ini_options]
addopts = [
    "--strict-config",
    "--strict-markers",
]
xfail_strict = true
filterwarnings = [
    # When running tests, treat warnings as errors (e.g. -Werror).
    # See: https://docs.pytest.org/en/latest/reference/reference.html#confval-filterwarnings
    "error",
    # Add additional warning supressions as needed here. For example, if a third-party library
    # is throwing a deprecation warning that needs to be fixed upstream:
    # "ignore::DeprecationWarning:typer",
]

[tool.coverage.run]
branch = true
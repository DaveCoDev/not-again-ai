[project]
name = "not-again-ai"
version = "0.16.0"
description = "Designed to once and for all collect all the little things that come up over and over again in AI projects and put them in one place."
authors = [
    { name = "DaveCoDev", email = "dave.co.dev@gmail.com" }
]
license = "MIT"
readme = "README.md"
repository = "https://github.com/DaveCoDev/not-again-ai"
documentation = "https://github.com/DaveCoDev/not-again-ai"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]
requires-python = ">=3.11, <3.13"
dependencies = [
    "loguru>=0.7",
    "pydantic>=2.10"
]

[project.urls]
Homepage = "https://github.com/DaveCoDev/not-again-ai"
Documentation = "https://davecodev.github.io/not-again-ai/"
Repository = "https://github.com/DaveCoDev/not-again-ai"

[tool.poetry]
requires-poetry = ">=2.0.1"

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.8"

[project.optional-dependencies]
data = [
    "playwright>=1.49",
    "pytest-playwright>=0.7"
]
llm = [
    "azure-identity>=1.19",
    "ollama>=0.4",
    "openai>=1",
    "python-liquid>=1.12",
    "tiktoken>=0.8"
]
statistics = [
    "numpy>=2.2",
    "scikit-learn>=1.6",
    "scipy>=1.15"
]
viz = [
    "numpy>=2.2",
    "pandas>=2.2",
    "seaborn>=0.13"
]

[tool.poetry.group.dev.dependencies]
ipykernel = "*"
ipywidgets = "*"

[tool.poetry.group.nox.dependencies]
nox-poetry = "*"

[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-randomly = "*"

[tool.poetry.group.type_check.dependencies]
mypy = "*"
# As of mypy 0.900, mypy no longer bundles the stubs for third-party libraries that reside
# in the typeshed project. Add these "types-" packages here if you depend on them in
# requirements.in (e.g. types-requests).
# See: http://mypy-lang.blogspot.com/2021/06/mypy-0900-released.html
#      https://github.com/python/typeshed/tree/main/stubs

[tool.poetry.group.lint.dependencies]
ruff = "*"

[tool.poetry.group.docs.dependencies]
mkdocs-material = "*"
mkdocs-htmlproofer-plugin = "*"
mkdocstrings = { version = "*", extras = ["python"] }
# Autodoc.
mkdocs-gen-files = "*"
mkdocs-literate-nav = "*"

[tool.poetry.group.typos.dependencies]
typos = "*"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
ignore_missing_imports = true
strict = true
# If certain strict config options are too pedantic for a project,
# disable them selectively here by setting to false.
disallow_untyped_calls = false

[tool.ruff]
line-length = 120
target-version = "py311"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "F", # pyflakes
    "E", # pycodestyle
    "I", # isort
    "N", # pep8-naming
    "UP", # pyupgrade
    "RUF", # ruff
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "PIE", # flake8-pie
    "PT", # flake-pytest-style
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
]
ignore = ["E501"]
unfixable = ["F401"]

[tool.ruff.lint.isort]
force-sort-within-sections = true
split-on-trailing-comma = false

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.pytest.ini_options]
addopts = [
    "--strict-config",
    "--strict-markers",
]
xfail_strict = true
filterwarnings = [
    # When running tests, treat warnings as errors (e.g. -Werror).
    # See: https://docs.pytest.org/en/latest/reference/reference.html#confval-filterwarnings
    "error",
    # Add additional warning suppressions as needed here. For example, if a third-party library
    # is throwing a deprecation warning that needs to be fixed upstream:
    # "ignore::DeprecationWarning:typer",
    "ignore::pytest.PytestUnraisableExceptionWarning"
]

[tool.coverage.run]
branch = true